#include "defines.h"
#include "LUT_sin_cos.h"
#include "sprites.h"
#include "buttons.h"
#include "philFacingRight3.h"
#include "phil.h"
#include "philFacingRight.h"
#include "philFacingRight2.h"
#include "philJumping.h"
#include "laser.h"
#include "bg.pal.h"
#include "shipBGscrn.raw.h"
#include "shipBGscrn.map.h"
#include "shipHitMapscrn.raw.h"
#include "shipHitMapscrn.map.h"
#include "hudLife.h"
#include "hudPercent.h"
#include "hud0.h"
#include "hud1.h"
#include "hud2.h"
#include "hud3.h"
#include "hud4.h"
#include "hud5.h"
#include "hud6.h"
#include "hud7.h"
#include "hud8.h"
#include "hud9.h"
#include "laserPurple.h"
#include "enemy.h"
#include <Math.h>

void Gravity();
void Jump();
SpriteHandler Move(Direction, SpriteHandler);
void RemoveSprite(SpriteHandler*);
int GetNextTile(int, int);
void Shoot(int, int, int, int, Direction, int, int);
void MoveMapRight();
void MoveMapLeft();
void CopyRowToBackground(int, int, int, int, const unsigned short*, unsigned short*, int);
void CopyColumnToBackground(int, int, int, int, const unsigned short*, unsigned short*, int);
int CanMove(int, int);
int CanMoveRight(SpriteHandler);
int CanMoveLeft(SpriteHandler);
int CanMoveUp(SpriteHandler);
int CanMoveDown(SpriteHandler);
int SpawnEnemy(int, int);
int HitTest(SpriteHandler, SpriteHandler);
void CounterPlayerMovement(int);
void ChangePlayerHealth(int);
int ShouldEnemyShoot();

#define MAP_WIDTH 800
#define MAP_HEIGHT 160
#define MAP_COLUMNS 100
#define MAP_ROWS 20
const unsigned char* mapTiles = shipBGscrn_Tiles;
const u16* map = shipBGscrn_Map;
const u16* mapPalette = bg_Palette;
const u16* hitMap = shipHitMapscrn_Map;
const unsigned char* hitMapTiles = shipHitMapscrn_Tiles;

u16* bg0map, *bg1map;
#define FORWARD_SPRITE_LOC 0
#define SIDEWAYS_SPRITE_LOC 32 * 32 / (8 * 8) * 2
#define WALKING1_SPRITE_LOC 32 * 32 / (8 * 8) * 2 * 2
#define WALKING2_SPRITE_LOC 32 * 32 / (8 * 8) * 2 * 3
#define JUMPING_SPRITE_LOC 32 * 32 / (8 * 8) * 2 * 4
#define ENEMY_SPRITE_LOC 32 * 32 / (8 * 8) * 2 * 5
#define CHAR_LASER_SPRITE_LOC (32 * 32 / (8 * 8) * 2 * 6)
#define ENEMY_LASER_SPRITE_LOC (32 * 32 / (8 * 8) * 2 * 6) + 2
#define HUD_0_SPRITE (32 * 32 / (8 * 8) * 2 * 6) + (2 * 2)
#define HUD_1_SPRITE (32 * 32 / (8 * 8) * 2 * 6) + (3 * 2)
#define HUD_2_SPRITE (32 * 32 / (8 * 8) * 2 * 6) + (4 * 2)
#define HUD_3_SPRITE (32 * 32 / (8 * 8) * 2 * 6) + (5 * 2)
#define HUD_4_SPRITE (32 * 32 / (8 * 8) * 2 * 6) + (6 * 2)
#define HUD_5_SPRITE (32 * 32 / (8 * 8) * 2 * 6) + (7 * 2)
#define HUD_6_SPRITE (32 * 32 / (8 * 8) * 2 * 6) + (8 * 2)
#define HUD_7_SPRITE (32 * 32 / (8 * 8) * 2 * 6) + (9 * 2)
#define HUD_8_SPRITE (32 * 32 / (8 * 8) * 2 * 6) + (10 * 2)
#define HUD_9_SPRITE (32 * 32 / (8 * 8) * 2 * 6) + (11 * 2)
#define HUD_PERCENT_SPRITE (32 * 32 / (8 * 8) * 2 * 6) + (12 * 2)
#define HUD_LIFE_SPRITE (32 * 32 / (8 * 8) * 2 * 6) + (13 * 2)
SpriteHandler sprites[128];

#define JUMP_HEIGHT 20
bool isJumping = false;
bool isMoving = false;
int jumpDuration;
int walkingCounter = 0;
int characterSpriteIndex;
int enemySpriteIndex;
int leftHealthIndex;
int rightHealthIndex;

int mapLeft = 0, mapRight = 255, screenLeft = 0, screenRight = 239, nextColumn = 0, prevColumn = 0;
int mapTop = 0, mapBottom = 255, screenTop = 0, screenBottom = 159, nextRow = 0, prevRow = 0;

int regX = 0, regY = 0;
int tookStep = 0;

BoundingBox characterWalkingRightBBox;
BoundingBox characterStandingRightBBox;
BoundingBox characterWalkingLeftBBox;
BoundingBox characterStandingLeftBBox;
BoundingBox characterGunBBox;

void ShipInitialize()
{
	SetMode(0 |OBJ_ENABLE|OBJ_MAP_1D | BG0_ENABLE);
	
	int n, startLocation = 0;
	for(n = 0; n < 256; n++)
		SpritePal[n] = philPalette[n];
	
	for(n = 0; n < 32*32/2; n++)
		SpriteData[n] = philData[n];
		
	startLocation = n;
	for (; n < 32 * 32 / 2 + startLocation; n++)
		SpriteData[n] = philFacingRightData[n - startLocation];
		
	startLocation = n;
	for (; n < 32 * 32 / 2 + startLocation; n++)
		SpriteData[n] = philFacingRight2Data[n - startLocation];
		
	startLocation = n;
	for (; n < 32 * 32 / 2 + startLocation; n++)
		SpriteData[n] = philFacingRight3Data[n - startLocation];
		
	startLocation = n;
	for (; n < 32 * 32 / 2 + startLocation; n++)
		SpriteData[n] = philJumpingData[n - startLocation];

	startLocation = n;
	for (; n < 32 * 32 / 2 + startLocation; n++)
		SpriteData[n] = enemyData[n - startLocation];
		
	startLocation = n;
	for(; n < 8 * 8 / 2 + startLocation; n++)
		SpriteData[n] = laserPurpleData[n - startLocation];
		
	startLocation = n;
	for(; n < 8 * 8 / 2 + startLocation; n++)
		SpriteData[n] = laserData[n - startLocation];
		
	startLocation = n;
	for(; n < 8 * 8 / 2 + startLocation; n++)
		SpriteData[n] = hud0Data[n - startLocation];
		
	startLocation = n;
	for(; n < 8 * 8 / 2 + startLocation; n++)
		SpriteData[n] = hud1Data[n - startLocation];
		
	startLocation = n;
	for(; n < 8 * 8 / 2 + startLocation; n++)
		SpriteData[n] = hud2Data[n - startLocation];
		
	startLocation = n;
	for(; n < 8 * 8 / 2 + startLocation; n++)
		SpriteData[n] = hud3Data[n - startLocation];
		
	startLocation = n;
	for(; n < 8 * 8 / 2 + startLocation; n++)
		SpriteData[n] = hud4Data[n - startLocation];
		
	startLocation = n;
	for(; n < 8 * 8 / 2 + startLocation; n++)
		SpriteData[n] = hud5Data[n - startLocation];
		
	startLocation = n;
	for(; n < 8 * 8 / 2 + startLocation; n++)
		SpriteData[n] = hud6Data[n - startLocation];
		
	startLocation = n;
	for(; n < 8 * 8 / 2 + startLocation; n++)
		SpriteData[n] = hud7Data[n - startLocation];
		
	startLocation = n;
	for(; n < 8 * 8 / 2 + startLocation; n++)
		SpriteData[n] = hud8Data[n - startLocation];
		
	startLocation = n;
	for(; n < 8 * 8 / 2 + startLocation; n++)
		SpriteData[n] = hud9Data[n - startLocation];
		
	startLocation = n;
	for(; n < 8 * 8 / 2 + startLocation; n++)
		SpriteData[n] = hudPercentData[n - startLocation];
		
	startLocation = n;
	for(; n < 16 * 16 / 2 + startLocation; n++)
		SpriteData[n] = hudLifeData[n - startLocation];
		
	for(n = 0; n < 128; n++)
	{
		RemoveSprite(&sprites[n]);
	}
	
	characterWalkingRightBBox.x = 2;
	characterWalkingRightBBox.y = 0;
	characterWalkingRightBBox.xsize = 16;
	characterWalkingRightBBox.ysize = 32;
		
	characterStandingRightBBox.x = 7;
	characterStandingRightBBox.y = 0;
	characterStandingRightBBox.xsize = 8;
	characterStandingRightBBox.ysize = 32;
	
	characterWalkingLeftBBox.x = 18;
	characterWalkingLeftBBox.y = 0;
	characterWalkingLeftBBox.xsize = 16;
	characterWalkingLeftBBox.ysize = 32;
		
	characterStandingLeftBBox.x = 14;
	characterStandingLeftBBox.y = 0;
	characterStandingLeftBBox.xsize = 8;
	characterStandingLeftBBox.ysize = 32;

	characterSpriteIndex = 0;
	sprites[characterSpriteIndex].y = 96;
	sprites[characterSpriteIndex].x = 0;
	sprites[characterSpriteIndex].mapX = 0;
	sprites[characterSpriteIndex].mapY = 96;
	sprites[characterSpriteIndex].size = SIZE_32;
	sprites[characterSpriteIndex].shape = SQUARE;
	sprites[characterSpriteIndex].location = SIDEWAYS_SPRITE_LOC;
	sprites[characterSpriteIndex].boundingBox = characterStandingRightBBox;
	sprites[characterSpriteIndex].noGravity = false;
	sprites[characterSpriteIndex].isProjectile = false;
	sprites[characterSpriteIndex].speed = 1;
	sprites[characterSpriteIndex].isRemoved = false;
	sprites[characterSpriteIndex].dir = RIGHT;
	sprites[characterSpriteIndex].hits = 10;
	
	enemySpriteIndex = SpawnEnemy(260,96);
	int loc = GetNextFreePosition(sprites, 128, 0);
	sprites[loc].y = 140;
	sprites[loc].x = 4;
	sprites[loc].size = SIZE_8;
	sprites[loc].shape = WIDE;
	sprites[loc].location = HUD_LIFE_SPRITE;
	sprites[loc].noGravity = true;
	sprites[loc].isProjectile = false;
	sprites[loc].isRemoved = false;
	
	leftHealthIndex = GetNextFreePosition(sprites, 128, 0);
	rightHealthIndex = leftHealthIndex + 1;
	ChangePlayerHealth(sprites[characterSpriteIndex].hits);
	
	WaitVBlank();
	UpdateSpriteMemory(sprites, 128);

	//create a pointer to background 0 tilemap buffer
	bg0map =(unsigned short*)ScreenBaseBlock(31);
	bg1map = (unsigned short*)ScreenBaseBlock(28);

	//set up background 0
	//We are using a 256x256 Map which is placed in ScreenBaseBlock 31
	REG_BG0CNT = BG_COLOR256 | TEXTBG_SIZE_256x256 | (31 << SCREEN_SHIFT);
	
	REG_BG1CNT = BG_COLOR256 | TEXTBG_SIZE_256x256 | (28 << SCREEN_SHIFT);
	
	//copy the palette into the background palette memory
	DMAFastCopy((void*)mapPalette, (void*)BGPaletteMem, 256, DMA_16NOW);

	//copy the tile images into the tile memory
	DMAFastCopy((void*)mapTiles, (void*)CharBaseBlock(0), 1248, DMA_32NOW);
	
	DMAFastCopy((void*)hitMapTiles, (void*)CharBaseBlock(2), 32, DMA_32NOW);
	
	int i, j;
	for (i = 0; i < 32; i++)
	{
		for (j = 0; j < 32; j++)
		{
			bg0map[i * 32 + j] = map[i * MAP_COLUMNS + j];
			bg1map[i * 32 + j] = hitMap[i * MAP_COLUMNS + j];
		}
	}
}

void ShipUpdate()
{
	keyPoll();
	Direction dir;
	Direction mapMoved;
	int projectileMoveCounter = 0;
	if (keyHit(BUTTON_UP) && !isJumping)
	{
		sprites[characterSpriteIndex].location = JUMPING_SPRITE_LOC;
		isJumping = true;
		jumpDuration = 0;
		walkingCounter = 0;
	}
	if (isJumping && jumpDuration < JUMP_HEIGHT)
	{
		dir = UP;
		sprites[characterSpriteIndex] = Move(dir, sprites[characterSpriteIndex]);
		jumpDuration++;
	}
	e4lse
	{
		Gravity();
	}
	if (keyHeld(BUTTON_RIGHT))
	{
		if (!isJumping)
		{
			if (walkingCounter % 40 == 10)
			{
				sprites[characterSpriteIndex].location = WALKING1_SPRITE_LOC;
				sprites[characterSpriteIndex].boundingBox = characterWalkingRightBBox;
			}
			else if (walkingCounter % 40 == 20)
			{
				sprites[characterSpriteIndex].location = SIDEWAYS_SPRITE_LOC;
				sprites[characterSpriteIndex].boundingBox = characterStandingRightBBox;
			}
			else if (walkingCounter % 40 == 30)
			{
				sprites[characterSpriteIndex].location = WALKING2_SPRITE_LOC;
				sprites[characterSpriteIndex].boundingBox = characterWalkingRightBBox;
			}
			else if (walkingCounter % 40 == 0)
			{
				sprites[characterSpriteIndex].location = SIDEWAYS_SPRITE_LOC;
				sprites[characterSpriteIndex].boundingBox = characterStandingRightBBox;
			}
		}
		sprites[characterSpriteIndex].hFlip = false;
		sprites[characterSpriteIndex].dir = RIGHT;
		if (!tookStep)
		{
			tookStep = 1;
			int prevX;
			if (sprites[characterSpriteIndex].x < 120 || screenRight >= MAP_WIDTH - 1)
			{	
				if (!HitTest(sprites[characterSpriteIndex], sprites[enemySpriteIndex]))
				{
					prevX = sprites[characterSpriteIndex].x;
					sprites[characterSpriteIndex] = Move(sprites[characterSpriteIndex].dir, sprites[characterSpriteIndex]);
					if (prevX != sprites[characterSpriteIndex].x)
						walkingCounter++;
				}
			}
			else
			{
				if (!HitTest(sprites[characterSpriteIndex], sprites[enemySpriteIndex]))
				{
					prevX = sprites[characterSpriteIndex].mapX;
					sprites[characterSpriteIndex].dir = RIGHT;
					MoveMapRight();
					if (prevX != sprites[characterSpriteIndex].mapX)
					{
						walkingCounter++;
						projectileMoveCounter = sprites[characterSpriteIndex].mapX - prevX;
						mapMoved = RIGHT;
						CounterPlayerMovement(prevX - sprites[characterSpriteIndex].mapX);
					}
				}
			}
		}
		else
		{
			tookStep = 0;
		}
	}
		
	if (keyHeld(BUTTON_LEFT))
	{
		if (!isJumping)
		{
			if (walkingCounter % 40 == 10)
			{
				sprites[characterSpriteIndex].location = WALKING1_SPRITE_LOC;
				sprites[characterSpriteIndex].boundingBox = characterWalkingLeftBBox;
			}
			else if (walkingCounter % 40 == 20)
			{
				sprites[characterSpriteIndex].location = SIDEWAYS_SPRITE_LOC;
				sprites[characterSpriteIndex].boundingBox = characterStandingLeftBBox;
			}
			else if (walkingCounter % 40 == 30)
			{
				sprites[characterSpriteIndex].location = WALKING2_SPRITE_LOC;
				sprites[characterSpriteIndex].boundingBox = characterWalkingLeftBBox;
			}
			else if (walkingCounter % 40 == 0)
			{
				sprites[characterSpriteIndex].location = SIDEWAYS_SPRITE_LOC;
				sprites[characterSpriteIndex].boundingBox = characterStandingLeftBBox;
			}
		}	
		sprites[characterSpriteIndex].hFlip = true;
		sprites[characterSpriteIndex].dir = LEFT;
		if (!tookStep)
		{
			tookStep = 1;
			int prevX;
			if (sprites[characterSpriteIndex].x > 120 || screenLeft == 0)
			{
				if (!HitTest(sprites[characterSpriteIndex], sprites[enemySpriteIndex]))
				{
					prevX = sprites[characterSpriteIndex].x;
					sprites[characterSpriteIndex] = Move(sprites[characterSpriteIndex].dir, sprites[characterSpriteIndex]);
					if (prevX != sprites[characterSpriteIndex].x)
						walkingCounter++;
				}
			}
			else
			{
				if (!HitTest(sprites[characterSpriteIndex], sprites[enemySpriteIndex]))
				{
					prevX = sprites[characterSpriteIndex].mapX;
					sprites[characterSpriteIndex].dir = LEFT;
					MoveMapLeft();
					if (prevX != sprites[characterSpriteIndex].mapX)
					{
						walkingCounter++;
						projectileMoveCounter = prevX - sprites[characterSpriteIndex].mapX;
						mapMoved = LEFT;
						CounterPlayerMovement(prevX - sprites[characterSpriteIndex].mapX);
					}
				}
			}
		}
		else
		{
			tookStep = 0;
		}
	}
	
	if (keyHit(BUTTON_A))
	{
		SpriteHandler character = sprites[characterSpriteIndex];
		if (character.dir == RIGHT) 
		{
			Shoot(character.x + 20, character.y + 7, character.mapX + 20, character.mapY + 7, character.dir, CHAR_LASER_SPRITE_LOC, 0);
		}
		else if (character.dir == LEFT)
		{
			Shoot(character.x + 2, character.y + 7, character.mapX + 2, character.mapY + 7, character.dir, CHAR_LASER_SPRITE_LOC, 0);
		}
	}
	
	if (rand() % 100 == 0)
	{
		SpriteHandler enemy = sprites[enemySpriteIndex];
		Shoot(enemy.x, enemy.y + 12, enemy.mapX, enemy.mapY + 12, enemy.dir, ENEMY_LASER_SPRITE_LOC, 1);
	}
	
	int i;
	for (i = 0; i < 128; i++)
	{
		if (sprites[i].isProjectile && !sprites[i].isRemoved)
		{
			sprites[i] = Move(sprites[i].dir, sprites[i]);
			if (!sprites[i].isEnemy && HitTest(sprites[i], sprites[enemySpriteIndex]))
			{
				RemoveSprite(&sprites[i]);
				RemoveSprite(&sprites[enemySpriteIndex]);
			}
			else if (sprites[i].isEnemy && HitTest(sprites[i], sprites[characterSpriteIndex]))
			{
				RemoveSprite(&sprites[i]);
				sprites[characterSpriteIndex].hits--;
				if (sprites[characterSpriteIndex].hits > 0)
					ChangePlayerHealth(sprites[characterSpriteIndex].hits);
			}
		}		
	}
	
	if (!keyHeld(BUTTON_LEFT) && !keyHeld(BUTTON_RIGHT) && !isJumping)
	{
		sprites[characterSpriteIndex].location = SIDEWAYS_SPRITE_LOC;
		if (sprites[characterSpriteIndex].dir == RIGHT)
			sprites[characterSpriteIndex].boundingBox = characterStandingRightBBox;
		else if (sprites[characterSpriteIndex].dir == LEFT)
			sprites[characterSpriteIndex].boundingBox = characterStandingLeftBBox;
	}
	
	WaitVBlank();
	UpdateSpriteMemory(sprites, 128);
	REG_BG0VOFS = regY;
	REG_BG0HOFS = regX;
	
	int n;
	for(n = 0; n < 30000; n++);
}

int main(void)
{			

	ShipInitialize();
	
   while(1)
   {
        ShipUpdate();
   }

   return 0;
}

void Gravity()
{
	int i;
	for (i = 0; i < 128; i++)
	{
		if (!sprites[i].noGravity && !sprites[i].isRemoved)
		{
			if (!CanMoveDown(sprites[i]))
			{
				if (isJumping && i == characterSpriteIndex)
				{	
					sprites[characterSpriteIndex].location = SIDEWAYS_SPRITE_LOC;
					if (sprites[characterSpriteIndex].dir == RIGHT)
						sprites[characterSpriteIndex].boundingBox = characterStandingRightBBox;
					else if (sprites[characterSpriteIndex].dir == LEFT)
						sprites[characterSpriteIndex].boundingBox = characterStandingLeftBBox;
					isJumping = false;
				}
				break;
			}
				
			sprites[i].y++;
			sprites[i].mapY++;
		}
	}
}

int GetNextTile(int x, int y)
{
	y %= 256;
	x %= 256;
	return bg1map[(y / 8) * 32 + (x / 8)];
}

void Shoot(int startX, int startY, int mapX, int mapY, Direction dir, int spriteLoc, int isEnemy)
{
	int location = GetNextFreePosition(sprites, 128, 10);
	BoundingBox laserBBox;
	laserBBox.x = 0;
	laserBBox.y = 4;
	laserBBox.xsize = 8;
	laserBBox.ysize = 2;
	sprites[location].y = startY;
	sprites[location].x = startX;
	sprites[location].mapX = mapX;
	sprites[location].mapY = mapY;
	sprites[location].size = SIZE_8;
	sprites[location].shape = SQUARE;
	sprites[location].location = spriteLoc;
	sprites[location].boundingBox = laserBBox;
	sprites[location].noGravity = true;
	sprites[location].isProjectile = true;
	sprites[location].speed = 5;
	sprites[location].isRemoved = false;
	sprites[location].dir = dir;
	sprites[location].isEnemy = isEnemy;
}

SpriteHandler Move(Direction direction, SpriteHandler sprite)
{
	switch(direction)
	{
		case LEFT:
		{
			if (sprite.mapX > 0 && CanMoveLeft(sprite))
			{
				sprite.x -= sprite.speed;
				sprite.mapX -= sprite.speed;
				if (sprite.isProjectile && sprite.x == 0)
				{
					RemoveSprite(&sprite);
				}
			}
			else
			{
				if (sprite.isProjectile)
				{
					RemoveSprite(&sprite);
				}
			}
			break;
		}
		case RIGHT:
		{
			if (sprite.mapX < MAP_WIDTH - 1 && CanMoveRight(sprite))
			{
				sprite.x += sprite.speed;
				sprite.mapX += sprite.speed;
				if (sprite.isProjectile && sprite.x > 240)
				{
					RemoveSprite(&sprite);
				}
			}
			else
			{
				if (sprite.isProjectile)
				{
					RemoveSprite(&sprite);
				}
			}
			break;
		}
		case UP:
		{
			if (sprite.mapY > 0 && CanMoveUp(sprite))
			{
				sprite.y--;
				sprite.mapY--;
			}
			break;
		}
		default:
			break;
	}
	
	return sprite;
}

void MoveMapLeft()
{
	if (screenLeft > 0 && CanMoveLeft(sprites[characterSpriteIndex]))
	{
		regX--;
		if (mapLeft > 0)
		{
			mapLeft--; mapRight--;
		}
		
		prevColumn = screenLeft / 8;
		screenLeft--; screenRight--;
		sprites[characterSpriteIndex].mapX -= sprites[characterSpriteIndex].speed;
		nextColumn = screenLeft / 8;
		if (nextColumn < prevColumn)
		{
			CopyColumnToBackground(screenLeft, nextColumn, mapTop, mapBottom, map, bg0map, MAP_COLUMNS);
			CopyColumnToBackground(screenLeft, nextColumn, mapTop, mapBottom, hitMap, bg1map, MAP_COLUMNS);
		}
	}
}

void MoveMapRight()
{
	if (screenRight < MAP_WIDTH - 1 && CanMoveRight(sprites[characterSpriteIndex]))
	{
		regX++;
		if (mapRight < MAP_WIDTH - 1)
		{
			mapRight++; mapLeft++;
		}
		
		prevColumn = screenRight / 8;
		screenLeft++; screenRight++;
		sprites[characterSpriteIndex].mapX += sprites[characterSpriteIndex].speed;
		nextColumn = screenRight / 8;
		if (nextColumn > prevColumn)
		{
			CopyColumnToBackground(screenRight, nextColumn, mapTop, mapBottom, map, bg0map, MAP_COLUMNS);
			CopyColumnToBackground(screenRight, nextColumn, mapTop, mapBottom, hitMap, bg1map, MAP_COLUMNS);
		}
	}
}

int CanMove(int x, int y)
{
	return GetNextTile(x,y) != 1;
}

int CanMoveRight(SpriteHandler sprite)
{
	int y = sprite.mapY;
	int x = sprite.mapX + sprite.boundingBox.xsize + sprite.boundingBox.x;
	if (!CanMove(x + 1, y)) 
	{
		return 0;
	}
	
	int halfYSize = sprite.boundingBox.ysize / 2;
	y += halfYSize;
	if (!CanMove(x + 1, y))
	{
		return 0;
	}
	
	y += halfYSize - 1;
	if (!CanMove(x + 1,y))
	{
		return 0;
	}
	
	return 1;
}

int CanMoveLeft(SpriteHandler sprite)
{
	int y = sprite.mapY;
	int x = sprite.mapX + sprite.boundingBox.x;
	if (!CanMove(x - 1, y))
	{
		return 0;
	}
	int halfYSize = sprite.boundingBox.ysize / 2;
	y += halfYSize;
	if (!CanMove(x - 1, y))
	{
		return 0;
	}
	
	y += halfYSize - 1;
	if (!CanMove(x - 1,y))
	{
		return 0;
	}
	
	return 1;
}

int CanMoveUp(SpriteHandler sprite)
{
	int y = sprite.mapY;
	int x = sprite.mapX + sprite.boundingBox.x;
	if (!CanMove(x, y)) 
	{
		return 0;
	}
	
	int halfXSize = sprite.boundingBox.xsize / 2;
	x += halfXSize;
	if (!CanMove(x, y))
	{
		return 0;
	}
	
	x += halfXSize;
	if (!CanMove(x,y))
	{
		return 0;
	}
	
	return 1;
}

int CanMoveDown(SpriteHandler sprite)
{
	int y = sprite.mapY + sprite.boundingBox.ysize;
	int x = sprite.mapX + sprite.boundingBox.x;
	if (!CanMove(x, y)) 
	{
		return 0;
	}
	
	int halfXSize = sprite.boundingBox.xsize / 2;
	x += halfXSize;
	if (!CanMove(x, y))
	{
		return 0;
	}
	
	x += halfXSize;
	if (!CanMove(x,y))
	{
		return 0;
	}
	
	return 1;
}

void RemoveSprite(SpriteHandler* sprite)
{
	sprite->x = 240;
	sprite->y = 160;
	sprite->isRemoved = true;
}

int SpawnEnemy(int mapX, int mapY)
{
	int location = GetNextFreePosition(sprites, 128, 0);
	sprites[location].y = 96;
	sprites[location].x = mapX > 240 ? 240 : mapX;
	sprites[location].mapX = mapX;
	sprites[location].mapY = mapY;
	sprites[location].size = SIZE_32;
	sprites[location].shape = TALL;
	sprites[location].location = ENEMY_SPRITE_LOC;
	sprites[location].boundingBox = characterWalkingLeftBBox;
	sprites[location].noGravity = false;
	sprites[location].isProjectile = false;
	sprites[location].speed = 1;
	sprites[location].isRemoved = false;
	sprites[location].dir = LEFT;
	
	return location;
}

int HitTest(SpriteHandler sprite1, SpriteHandler sprite2)
{	
	if (sprite1.x + sprite1.boundingBox.xsize >= sprite2.x && sprite1.x + sprite1.boundingBox.xsize <= sprite2.x + sprite2.boundingBox.xsize) 
	{
		if (sprite1.y >= sprite2.y && sprite1.y <= sprite2.y + sprite2.boundingBox.ysize)
		{
			return 1;
		}
	}
	return 0;
}

void CounterPlayerMovement(int amount)
{
	int i;
	for (i = 0; i < 128; i++)
	{
		if (!sprites[i].isRemoved && i != characterSpriteIndex && !sprites[i].isHUD)
		{
			if (sprites[i].mapX > mapLeft - sprites[i].boundingBox.xsize && sprites[i].mapX < mapRight)
				sprites[i].x += amount;
		}
	}
}

void ChangePlayerHealth(int health)
{
	int leftNum, rightNum;
	switch (health)
	{
		case 10: leftNum = HUD_1_SPRITE; rightNum = HUD_0_SPRITE; break;
		case 9: leftNum = HUD_0_SPRITE; rightNum = HUD_9_SPRITE; break;
		case 8: leftNum = HUD_0_SPRITE; rightNum = HUD_8_SPRITE; break;
		case 7: leftNum = HUD_0_SPRITE; rightNum = HUD_7_SPRITE; break;
		case 6: leftNum = HUD_0_SPRITE; rightNum = HUD_6_SPRITE; break;
		case 5: leftNum = HUD_0_SPRITE; rightNum = HUD_5_SPRITE; break;
		case 4: leftNum = HUD_0_SPRITE; rightNum = HUD_4_SPRITE; break;
		case 3: leftNum = HUD_0_SPRITE; rightNum = HUD_3_SPRITE; break;
		case 2: leftNum = HUD_0_SPRITE; rightNum = HUD_2_SPRITE; break;
		case 1: leftNum = HUD_0_SPRITE; rightNum = HUD_1_SPRITE; break;
		case 0: leftNum = HUD_0_SPRITE; rightNum = HUD_0_SPRITE; break;
	}
	sprites[leftHealthIndex].y = 148;
	sprites[leftHealthIndex].x = 4;
	sprites[leftHealthIndex].size = SIZE_8;
	sprites[leftHealthIndex].shape = SQUARE;
	sprites[leftHealthIndex].location = leftNum;
	sprites[leftHealthIndex].noGravity = true;
	sprites[leftHealthIndex].isProjectile = false;
	sprites[leftHealthIndex].isRemoved = false;
	sprites[leftHealthIndex].isHUD = true;
	
	sprites[rightHealthIndex].y = 148;
	sprites[rightHealthIndex].x = 12;
	sprites[rightHealthIndex].size = SIZE_8;
	sprites[rightHealthIndex].shape = SQUARE;
	sprites[rightHealthIndex].location = rightNum;
	sprites[rightHealthIndex].noGravity = true;
	sprites[rightHealthIndex].isProjectile = false;
	sprites[rightHealthIndex].isRemoved = false;
	sprites[rightHealthIndex].isHUD = true;
}

void CopyColumnToBackground(int column, int copyToColumn, int topRow, int bottomRow, const unsigned short* source, unsigned short* dest, int sourceColumns)
{
	int row;
	column /= 8;
	copyToColumn %= 32;
	topRow /= 8;
	bottomRow /= 8;
	for (row = topRow; row < bottomRow; row++)
		dest[(row % 32) * 32 + copyToColumn] = source[row * sourceColumns + column];
}

void CopyRowToBackground(int row, int copyToRow, int leftColumn, int rightColumn, const unsigned short* source, unsigned short* dest, int sourceColumns)
{
	int column;
	row /= 8;
	copyToRow %= 32;
	leftColumn /= 8;
	rightColumn /= 8;
	for (column = leftColumn; column < rightColumn; column++)
		dest[copyToRow * 32 + (column % 32)] = source[row * sourceColumns + column];
}
